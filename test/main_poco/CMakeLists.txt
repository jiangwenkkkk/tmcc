function(ocv_define_sample out_target source sub)
    get_filename_component(name "${source}" NAME_WE)
    set(the_target "example_${sub}_${name}")
    add_executable(${the_target} "${source}")

    target_link_libraries(${the_target} libPocoFoundation.dylib PocoNet PocoUtil PocoXML)
    message(${the_target})
    message(${source})
    set_target_properties(${the_target} PROPERTIES PROJECT_LABEL "(sample) ${name}")
    if(ENABLE_SOLUTION_FOLDERS)
        set_target_properties(${the_target} PROPERTIES FOLDER "samples/${sub}")
    endif()
    if(WIN32 AND MSVC AND NOT BUILD_SHARED_LIBS)
        set_target_properties(${the_target} PROPERTIES LINK_FLAGS "/NODEFAULTLIB:atlthunk.lib /NODEFAULTLIB:atlsd.lib /DEBUG")
    endif()
    if(WIN32)
        install(TARGETS ${the_target} RUNTIME DESTINATION "samples/${sub}" COMPONENT samples)
    endif()
    # Add single target to build all samples in the group: 'make opencv_samples_cpp'
    set(parent_target opencv_samples_${sub})
    if(NOT TARGET ${parent_target})
        add_custom_target(${parent_target})
        if(TARGET opencv_samples)
            add_dependencies(opencv_samples ${parent_target})
        endif()
    endif()
    add_dependencies(${parent_target} ${the_target})
    set(${out_target} ${the_target} PARENT_SCOPE)
endfunction()


project(cpp_samples)
file(GLOB_RECURSE cpp_samples RELATIVE ${CMAKE_CURRENT_SOURCE_DIR} *.cpp)


foreach(sample_filename ${cpp_samples})
    message(${sample_filename})
    set(package "cpp")
    if(sample_filename MATCHES "tutorial_code")
        set(package "tutorial")
    endif()
    if(sample_filename MATCHES "Chapter08")
        set(package "Chapter08")
    endif()

    ocv_define_sample(tgt ${sample_filename} ${package})
    if(sample_filename MATCHES "/gpu/" AND HAVE_opencv_cudaarithm AND HAVE_opencv_cuda_filters)
        ocv_target_link_libraries(${tgt} opencv_cudaarithm opencv_cudafilters)
    endif()
    if(sample_filename MATCHES "/viz/")
        ocv_target_link_libraries(${tgt} ${VTK_LIBRARIES})
        target_compile_definitions(${tgt} PRIVATE -DUSE_VTK)
    endif()
    if(HAVE_OPENGL AND sample_filename MATCHES "detect_mser")
        target_compile_definitions(${tgt} PRIVATE HAVE_OPENGL)
    endif()
endforeach()